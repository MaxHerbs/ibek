"""
Tests to verify the intermediate stages of making an IOC helm chart from
the definition in tests/samples/yaml/bl45p-mo-ioc-02.pmac.yaml

The full generation of helm chart is tested in test_cli.py
"""
from pathlib import Path

# I would use black but there is no API yet
from autopep8 import fix_code
from ruamel.yaml import YAML

from tests.test_render import (  # noqa: F401; pylint: disable=unused-variable
    pmac_classes,
)

sample_yaml = Path(__file__).parent / "samples" / "yaml"


BL45P_MO_IOC_02 = fix_code(
    """pmac(
    ioc_name='bl45p-mo-ioc-02',
    description='an example motion ioc for ibek testing',
    instances=(
        pmac.PmacAsynIPPort(
            type='pmac.PmacAsynIPPort',
            name='BRICK1port',
            IP='192.168.0.12:1112'),
        pmac.Geobrick(
            type='pmac.Geobrick',
            name='BL45P-MO-BRICK-01',
            PORT='BRICK1port',
            P='BL45P-MO-STEP-01:',
            idlePoll=100,
            movingPoll=500),
        pmac.DlsPmacAsynMotor(
            type='pmac.DlsPmacAsynMotor',
            PMAC='BL45P-MO-BRICK-01',
            axis=1,
            P='BL45P-MO-THIN-01',
            M=':X1',
            PORT='BL45P-MO-BRICK-01',
            SPORT='BRICK1port',
            name='X1 motor',
            DESC=' ',
            MRES=0.001,
            VELO=1.0,
            PREC=3.0,
            EGU='mm',
            TWV=1,
            DTYP='asynMotor',
            DIR=0,
            VBAS=1.0,
            VMAX=1.0,
            ACCL=0.5,
            BDST=0.0,
            BVEL=0.0,
            BACC=0.0,
            DHLM=10000.0,
            DLMM=-10000.0,
            HLM=0.0,
            LLM=0.0,
            HLSV='MAJOR',
            INIT=' ',
            SREV=1000.0,
            RRES=0.0,
            ERES=0.0,
            JAR=0.0,
            UEIP=0,
            URIP=0,
            RDBL='0',
            RLNK=' ',
            RTRY=0,
            DLY=0.0,
            OFF=0.0,
            RDBD=0.0,
            FOFF=0,
            ADEL=0.0,
            NTM=1,
            FEHEIGH=0.0,
            FEHIHI=0.0,
            FEHHSV='NO_ALARM',
            FEHSV='NO_ALARM',
            SCALE=1,
            HOMEVIS=1,
            HOMEVISST='Use motor summary screen',
            alh=' ',
            gda_name='none',
            gda_desc='$(DESC)',
            HOME='$(P)',
            ALLOW_HOMED_SET='#'),
        pmac.DlsPmacAsynMotor(
            type='pmac.DlsPmacAsynMotor',
            PMAC='BL45P-MO-BRICK-01',
            axis=2,
            P='BL45P-MO-THIN-01',
            M=':Y1',
            PORT='BL45P-MO-BRICK-01',
            SPORT='BRICK1port',
            name='Y1 motor',
            DESC=' ',
            MRES=0.001,
            VELO=1.0,
            PREC=3.0,
            EGU='mm',
            TWV=1,
            DTYP='asynMotor',
            DIR=0,
            VBAS=1.0,
            VMAX=1.0,
            ACCL=0.5,
            BDST=0.0,
            BVEL=0.0,
            BACC=0.0,
            DHLM=10000.0,
            DLMM=-10000.0,
            HLM=0.0,
            LLM=0.0,
            HLSV='MAJOR',
            INIT=' ',
            SREV=1000.0,
            RRES=0.0,
            ERES=0.0,
            JAR=0.0,
            UEIP=0,
            URIP=0,
            RDBL='0',
            RLNK=' ',
            RTRY=0,
            DLY=0.0,
            OFF=0.0,
            RDBD=0.0,
            FOFF=0,
            ADEL=0.0,
            NTM=1,
            FEHEIGH=0.0,
            FEHIHI=0.0,
            FEHHSV='NO_ALARM',
            FEHSV='NO_ALARM',
            SCALE=1,
            HOMEVIS=1,
            HOMEVISST='Use motor summary screen',
            alh=' ',
            gda_name='none',
            gda_desc='$(DESC)',
            HOME='$(P)',
            ALLOW_HOMED_SET='#')))
""",
    options={"aggressive": 1},
)


def test_deserialize_bl45p(pmac_classes) -> None:
    """
    Checks the in memory dataclasses generated by serialzing bl45p-mo-ioc-02.pmac.yaml
    """
    pmac_ioc_cls = pmac_classes["pmac"]

    with open(sample_yaml / "bl45p-mo-ioc-02.pmac.yaml") as f:
        d = YAML().load(f)
        code = pmac_ioc_cls.deserialize(d)
        actual = fix_code(str(code), options={"aggressive": 1})
    assert actual == BL45P_MO_IOC_02
