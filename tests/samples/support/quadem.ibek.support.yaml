# yaml-language-server: $schema=/tmp/ibek.schema.json

module: quadEM

defs:
  - name: TetrAMM
    description: |-
      TODO:ADD DESCRIPTION
    args:
      - type: id
        name: PORT
        description: |-
          Template argument

      - type: str
        name: P
        description: |-
          Base name of PV.

      - type: str
        name: R
        description: |-
          Second macro for name of PV.

      - type: int
        name: QSIZE
        description: |-
          ..
        default: 20

      - type: int
        name: RING_SIZE
        description: |-
          ..
        default: 10000

      - type: str
        name: IP
        description: |-
          IP address of the TetrAMM device

    databases:
      - file: $(QUADEM)/db/TetrAMM.template
        args:
          P:
          R:
          PORT:

    pre_init:
      - value: |
          drvAsynIPPortConfigure({{PORT}}ip, {{IP}}, 100, 0, 0)
          asynOctetSetInputEos({{PORT}}ip, 0, "\r\n")
          asynOctetSetOutputEos({{PORT}}ip, 0, "\r")

          # drvTetrAMMConfigure(portName, IPportName, RingSize)
          drvTetrAMMConfigure("{{PORT}}", "{{PORT}}ip", {{RING_SIZE}})

    post_init:
      - value: |
          # Increase precision of sample time for TetrAMM
          dbpf("{{P}}{{R}}SampleTime_RBV.PREC", "5")

  - name: Plugins
    description: |-
      Instantiates
        12 NDStats plugins for Current, Sum, Diff and Pos Channels
        12 NDTimeSeries plugins
        12 NDArray plugins
    args:
      - type: object
        name: DEVICE
        description: |-
          Reference to the parent quadEM device

      - type: id
        name: PORTPREFIX
        description: |-
          The prefix for plugin asyn port names

      - type: int
        name: STAT_NCHAN
        description: |-
          Template argument

      - type: int
        name: STAT_XSIZE
        description: |-
          Template argument

      - type: int
        name: HIST_SIZE
        description: |-
          Template argument
        default: 256

      - type: int
        name: QUEUE
        description: |-
          length of NDArray queue
        default: 16

    entities:
      - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I1", R: Cur1, P: PP, NCHANS: 2, XSIZE: 100, YSIZE: 100, HIST_SIZE: 10, NDARRAY_PORT: XBPM1.DRV }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I1", R: Cur1 }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I1", R: Cur1 }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I2", R: Cur2 }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I3", R: Cur3 }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.I4", R: Cur4 }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.SumX", R: SumX }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.SumY", R: SumY }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.SumAll", R: SumAll }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.DiffX", R: DiffX }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.DiffY", R: DiffY }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.PosX", R: PosX }
  # - { type: ADCore.NDStats, PORT: "{{PORTPREFIX}}.STATS.PosY", R: PosY }

  # pre_init:
  #   - when: first
  #   - value: |
  #       # NDStatsConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxBuffers, maxMemory, priority, stackSize, maxThreads)
  #       # NDTimeSeriesConfigure(portName, queueSize, blockingCallbacks, NDArrayPort, NDArrayAddr, maxSignals)

  #   - value: |
  #       {% for tab in ["I1", "I2", "I3", "I4" , "SumX", "SumY", "SumAll", "DiffX", "DiffY", "PosX", "PosY"] -%}
  #       {# support the historical, inconsistent naming of PVs and asyn ports #}
  #       {%- set r_val_stats = "Cur%d" % loop.index if tab.startswith("I") else tab -%}
  #       {%- set r_val_array = "ARR%d" % loop.index if tab.startswith("I") else "ARR%s" % tab -%}

  #       NDStatsConfigure({{PORTPREFIX}}.STATS.{{tab}}, {{QUEUE}}, 0, {{DEVICE.PORT}}, {{loop.index0}}, 0, 0, 0, 0, 1)
  #       dbLoadRecords("$(ADCORE)/db/NDStats.template", "P={{DEVICE.P}},R=:{{r_val_stats}}:, PORT={{PORTPREFIX}}.STATS.{{tab}}, ADDR=0, NDARRAY_PORT={{DEVICE.PORT}}, NDARRAY_ADDR={{loop.index0}}, NCHANS={{STAT_NCHAN}}, ENABLED=1, XSIZE={{STAT_XSIZE}}, YSIZE=0, HIST_SIZE={{HIST_SIZE}}")

  #       NDTimeSeriesConfigure({{PORTPREFIX}}.STATS.{{tab}}_TS, {{QUEUE}}, 0, {{PORTPREFIX}}.STATS.{{tab}}, 1, 23)
  #       dbLoadRecords("$(ADCORE)/db/NDTimeSeries.template",  "P={{DEVICE.P}}, R=:{{r_val_stats}}:TS:, PORT={{PORTPREFIX}}.STATS.{{tab}}_TS,ADDR=1, NDARRAY_PORT={{PORTPREFIX}}.{{tab}}, NDARRAY_ADDR=0, NCHANS={{STAT_NCHAN}}, ENABLED=1")

  #       NDStdArraysConfigure({{PORTPREFIX}}.ARRAYS.{{tab}}, {{QUEUE}}, 0, {{DEVICE.PORT}}, {{loop.index0}}, 0, 0, 0, 0, 1)
  #       dbLoadRecords("$(ADCORE)/db/NDStdArrays.template", "P={{DEVICE.P}},R=:{{r_val_array}}:, PORT={{PORTPREFIX}}.ARRAYS.{{tab}},ADDR=0, NDARRAY_PORT={{DEVICE.PORT}}, NDARRAY_ADDR={{loop.index0}}, ENABLED=1, FTVL=DOUBLE, TYPE=Float64, NCHANS={{STAT_NCHAN}}, XSIZE={{STAT_XSIZE}}, YSIZE=0, HIST_SIZE={{HIST_SIZE}}, NELEMENTS={{STAT_XSIZE}}")
  #       {% endfor %}
